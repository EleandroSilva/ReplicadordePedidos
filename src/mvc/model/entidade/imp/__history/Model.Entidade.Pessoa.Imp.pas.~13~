{*******************************************************}
{                      Be More Web                      }
{          Início do projeto 23/02/2025 12:02           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2025                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.Entidade.Pessoa.Imp;

interface

uses
  System.SysUtils,

  Model.Entidade.Pessoa.Interfaces;

type
  TEntidadePessoa<T : iInterface> = class(TInterfacedObject, iEntidadePessoa<T>)
    private
      [weak]
      FParent     : T;
      FId              : Integer;
      FNomePessoa      : String;
      FNomeFantasia    : String;
      FCEP             : String;
      FEndereco        : String;
      FNumero          : String;
      FBairro          : String;
      FMunicipio       : String;
      FEstado          : String;
      FCNPJCPF         : String;
      FIdRepresentante : String;
      FTelefone        : String;
      FCelular         : String;
    public
      constructor Create(Parent : T);
      destructor Destroy; override;
      class function New(Parent : T) : iEntidadePessoa<T>;

      function Id             (Value : Integer)     : iEntidadePessoa<T>; overload;
      function Id                                   : Integer;            overload;
      function NomePessoa     (Value : String)      : iEntidadePessoa<T>; overload;
      function NomePessoa                           : String;             overload;
      function NomeFantasia   (Value : String)      : iEntidadePessoa<T>; overload;
      function NomeFantasia                         : String;             overload;
      function CEP            (Value : String)      : iEntidadePessoa<T>; overload;
      function CEP                                  : String;             overload;
      function Endereco       (Value : String)      : iEntidadePessoa<T>; overload;
      function Endereco                             : String;             overload;
      function Numero         (Value : String)      : iEntidadePessoa<T>; overload;
      function Numero                               : String;             overload;
      function Bairro         (Value : String)      : iEntidadePessoa<T>; overload;
      function Bairro                               : String;             overload;
      function Municipio      (Value : String)      : iEntidadePessoa<T>; overload;
      function Municipio                            : String;             overload;
      function Estado         (Value : String)      : iEntidadePessoa<T>; overload;
      function Estado                               : String;             overload;
      function CNPJCPF        (Value : String)      : iEntidadePessoa<T>; overload;
      function CNPJCPF                              : String;             overload;
      function CNPJCPF        (Value : String)      : iEntidadePessoa<T>; overload;
      function CNPJCPF                              : String;             overload;
      function IdRepresentante(Value : String)      : iEntidadePessoa<T>; overload;
      function IdRepresentante                      : String;             overload;
      function Telefone       (Value : String)      : iEntidadePessoa<T>; overload;
      function Telefone                             : String;             overload;
      function Celular        (Value : String)      : iEntidadePessoa<T>; overload;
      function Celular                              : String;             overload;

      function &End : T;
  end;

implementation

{ TEntidadePessoa<T> }

constructor TEntidadePessoa<T>.Create(Parent: T);
begin
  FParent := Parent;
end;

destructor TEntidadePessoa<T>.Destroy;
begin
  inherited;
end;

class function TEntidadePessoa<T>.New(Parent: T): iEntidadePessoa<T>;
begin
  Result := Self.Create(Parent);
end;

function TEntidadePessoa<T>.Id(Value: Integer): iEntidadePessoa<T>;
begin
  Result := Self;
  FId    := Value;
end;

function TEntidadePessoa<T>.Id: Integer;
begin
  Result := FId;
end;

function TEntidadePessoa<T>.NomePessoa(Value: String): iEntidadePessoa<T>;
begin
  Result := Self;
  FNomePessoa := Value;
end;

function TEntidadePessoa<T>.NomePessoa: String;
begin
  Result := FNomePessoa;
end;

function TEntidadePessoa<T>.NomeFantasia(Value: String): iEntidadePessoa<T>;
begin
  Result := Self;
  FNomeFantasia := Value;
end;

function TEntidadePessoa<T>.NomeFantasia: String;
begin
  Result := FNomeFantasia;
end;

function TEntidadePessoa<T>.CEP(Value: String): iEntidadePessoa<T>;
begin
  Result := Self;
  FCep := Value;
end;

function TEntidadePessoa<T>.CEP: String;
begin
  Result := FCep;
end;

function TEntidadePessoa<T>.Numero(Value: String): iEntidadePessoa<T>;
begin
  Result := Self;
  FNumero := Value;
end;

function TEntidadePessoa<T>.Numero: String;
begin
  Result := FNumero;
end;

function TEntidadePessoa<T>.Telefone(Value: String): iEntidadePessoa<T>;
begin
  Result := Self;
  FTelefone := Value;
end;

function TEntidadePessoa<T>.Telefone: String;
begin
  Result := FTelefone;
end;

function TEntidadePessoa<T>.Bairro(Value: String): iEntidadePessoa<T>;
begin
  Result := Self;
  FBairro := Value;
end;

function TEntidadePessoa<T>.Bairro: String;
begin
  Result := FBairro;
end;

function TEntidadePessoa<T>.Celular(Value: String): iEntidadePessoa<T>;
begin
  Result := Self;
  FCelular := Value;
end;

function TEntidadePessoa<T>.Celualr: String;
begin
  Result := FCelular;
end;

function TEntidadePessoa<T>.CNPJCPF(Value: String): iEntidadePessoa<T>;
begin
  Result := Self;
  FCNPJCPF := Value;
end;

function TEntidadePessoa<T>.CNPJCPF: String;
begin
  Result := FCNPJCPF;
end;

function TEntidadePessoa<T>.IdRepresentante(Value: String): iEntidadePessoa<T>;
begin
  Result := Self;
  FIdRepresentante := Value;
end;

function TEntidadePessoa<T>.IdRepresentante: String;
begin
  Result := FIdRepresentante;
end;

function TEntidadePessoa<T>.Municipio(Value: String): iEntidadePessoa<T>;
begin

end;

function TEntidadePessoa<T>.Municipio: String;
begin

end;

function TEntidadePessoa<T>.&End: T;
begin
  Result := FParent;
end;

function TEntidadePessoa<T>.Endereco: String;
begin

end;

function TEntidadePessoa<T>.Endereco(Value: String): iEntidadePessoa<T>;
begin

end;

function TEntidadePessoa<T>.Estado(Value: String): iEntidadePessoa<T>;
begin

end;

function TEntidadePessoa<T>.Estado: String;
begin

end;

end.
